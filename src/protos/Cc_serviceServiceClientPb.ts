/**
 * @fileoverview gRPC-Web generated client stub for codectrl.logs_service
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.4
// source: cc_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as log_pb from './log_pb';
import * as cc_service_pb from './cc_service_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class LogServerClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetLog = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogServer/GetLog',
    grpcWeb.MethodType.UNARY,
    cc_service_pb.Connection,
    log_pb.Log,
    (request: cc_service_pb.Connection) => {
      return request.serializeBinary();
    },
    log_pb.Log.deserializeBinary
  );

  getLog(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null): Promise<log_pb.Log>;

  getLog(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: log_pb.Log) => void): grpcWeb.ClientReadableStream<log_pb.Log>;

  getLog(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: log_pb.Log) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.logs_service.LogServer/GetLog',
        request,
        metadata || {},
        this.methodDescriptorGetLog,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.logs_service.LogServer/GetLog',
    request,
    metadata || {},
    this.methodDescriptorGetLog);
  }

  methodDescriptorGetLogs = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogServer/GetLogs',
    grpcWeb.MethodType.SERVER_STREAMING,
    cc_service_pb.Connection,
    log_pb.Log,
    (request: cc_service_pb.Connection) => {
      return request.serializeBinary();
    },
    log_pb.Log.deserializeBinary
  );

  getLogs(
    request: cc_service_pb.Connection,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<log_pb.Log> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/codectrl.logs_service.LogServer/GetLogs',
      request,
      metadata || {},
      this.methodDescriptorGetLogs);
  }

  methodDescriptorGetServerDetails = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogServer/GetServerDetails',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    cc_service_pb.ServerDetails,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    cc_service_pb.ServerDetails.deserializeBinary
  );

  getServerDetails(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<cc_service_pb.ServerDetails>;

  getServerDetails(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: cc_service_pb.ServerDetails) => void): grpcWeb.ClientReadableStream<cc_service_pb.ServerDetails>;

  getServerDetails(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: cc_service_pb.ServerDetails) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.logs_service.LogServer/GetServerDetails',
        request,
        metadata || {},
        this.methodDescriptorGetServerDetails,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.logs_service.LogServer/GetServerDetails',
    request,
    metadata || {},
    this.methodDescriptorGetServerDetails);
  }

  methodDescriptorRegisterClient = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogServer/RegisterClient',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    cc_service_pb.Connection,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    cc_service_pb.Connection.deserializeBinary
  );

  registerClient(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<cc_service_pb.Connection>;

  registerClient(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: cc_service_pb.Connection) => void): grpcWeb.ClientReadableStream<cc_service_pb.Connection>;

  registerClient(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: cc_service_pb.Connection) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.logs_service.LogServer/RegisterClient',
        request,
        metadata || {},
        this.methodDescriptorRegisterClient,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.logs_service.LogServer/RegisterClient',
    request,
    metadata || {},
    this.methodDescriptorRegisterClient);
  }

  methodDescriptorRegisterExistingClient = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogServer/RegisterExistingClient',
    grpcWeb.MethodType.UNARY,
    cc_service_pb.Connection,
    cc_service_pb.RequestResult,
    (request: cc_service_pb.Connection) => {
      return request.serializeBinary();
    },
    cc_service_pb.RequestResult.deserializeBinary
  );

  registerExistingClient(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null): Promise<cc_service_pb.RequestResult>;

  registerExistingClient(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: cc_service_pb.RequestResult) => void): grpcWeb.ClientReadableStream<cc_service_pb.RequestResult>;

  registerExistingClient(
    request: cc_service_pb.Connection,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: cc_service_pb.RequestResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.logs_service.LogServer/RegisterExistingClient',
        request,
        metadata || {},
        this.methodDescriptorRegisterExistingClient,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.logs_service.LogServer/RegisterExistingClient',
    request,
    metadata || {},
    this.methodDescriptorRegisterExistingClient);
  }

}

export class LogClientClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendLog = new grpcWeb.MethodDescriptor(
    '/codectrl.logs_service.LogClient/SendLog',
    grpcWeb.MethodType.UNARY,
    log_pb.Log,
    cc_service_pb.RequestResult,
    (request: log_pb.Log) => {
      return request.serializeBinary();
    },
    cc_service_pb.RequestResult.deserializeBinary
  );

  sendLog(
    request: log_pb.Log,
    metadata: grpcWeb.Metadata | null): Promise<cc_service_pb.RequestResult>;

  sendLog(
    request: log_pb.Log,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: cc_service_pb.RequestResult) => void): grpcWeb.ClientReadableStream<cc_service_pb.RequestResult>;

  sendLog(
    request: log_pb.Log,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: cc_service_pb.RequestResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.logs_service.LogClient/SendLog',
        request,
        metadata || {},
        this.methodDescriptorSendLog,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.logs_service.LogClient/SendLog',
    request,
    metadata || {},
    this.methodDescriptorSendLog);
  }

}

