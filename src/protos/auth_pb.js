// source: auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.codectrl.auth_service.GenerateTokenRequest', null, global);
goog.exportSymbol('proto.codectrl.auth_service.GenerateTokenRequestResult', null, global);
goog.exportSymbol('proto.codectrl.auth_service.GenerateTokenRequestResultEnum', null, global);
goog.exportSymbol('proto.codectrl.auth_service.LoginUrl', null, global);
goog.exportSymbol('proto.codectrl.auth_service.Name', null, global);
goog.exportSymbol('proto.codectrl.auth_service.RevokeTokenRequestResult', null, global);
goog.exportSymbol('proto.codectrl.auth_service.RevokeTokenRequestResultEnum', null, global);
goog.exportSymbol('proto.codectrl.auth_service.Token', null, global);
goog.exportSymbol('proto.codectrl.auth_service.TokenIntent', null, global);
goog.exportSymbol('proto.codectrl.auth_service.TokenPermissions', null, global);
goog.exportSymbol('proto.codectrl.auth_service.VerifyTokenRequest', null, global);
goog.exportSymbol('proto.codectrl.auth_service.VerifyTokenRequestResult', null, global);
goog.exportSymbol('proto.codectrl.auth_service.VerifyTokenRequestResultEnum', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.Name.displayName = 'proto.codectrl.auth_service.Name';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.TokenPermissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.TokenPermissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.TokenPermissions.displayName = 'proto.codectrl.auth_service.TokenPermissions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.Token.displayName = 'proto.codectrl.auth_service.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.GenerateTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.GenerateTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.GenerateTokenRequest.displayName = 'proto.codectrl.auth_service.GenerateTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.VerifyTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.VerifyTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.VerifyTokenRequest.displayName = 'proto.codectrl.auth_service.VerifyTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.VerifyTokenRequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.VerifyTokenRequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.VerifyTokenRequestResult.displayName = 'proto.codectrl.auth_service.VerifyTokenRequestResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.RevokeTokenRequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.RevokeTokenRequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.RevokeTokenRequestResult.displayName = 'proto.codectrl.auth_service.RevokeTokenRequestResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.GenerateTokenRequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.GenerateTokenRequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.GenerateTokenRequestResult.displayName = 'proto.codectrl.auth_service.GenerateTokenRequestResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.auth_service.LoginUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.auth_service.LoginUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.auth_service.LoginUrl.displayName = 'proto.codectrl.auth_service.LoginUrl';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.Name}
 */
proto.codectrl.auth_service.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.Name;
  return proto.codectrl.auth_service.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.Name}
 */
proto.codectrl.auth_service.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string inner = 1;
 * @return {string}
 */
proto.codectrl.auth_service.Name.prototype.getInner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.auth_service.Name} returns this
 */
proto.codectrl.auth_service.Name.prototype.setInner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.TokenPermissions.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.TokenPermissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.TokenPermissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.TokenPermissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    read: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    write: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.TokenPermissions}
 */
proto.codectrl.auth_service.TokenPermissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.TokenPermissions;
  return proto.codectrl.auth_service.TokenPermissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.TokenPermissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.TokenPermissions}
 */
proto.codectrl.auth_service.TokenPermissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.TokenPermissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.TokenPermissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.TokenPermissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.TokenPermissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRead();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getWrite();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool read = 1;
 * @return {boolean}
 */
proto.codectrl.auth_service.TokenPermissions.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.codectrl.auth_service.TokenPermissions} returns this
 */
proto.codectrl.auth_service.TokenPermissions.prototype.setRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool write = 2;
 * @return {boolean}
 */
proto.codectrl.auth_service.TokenPermissions.prototype.getWrite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.codectrl.auth_service.TokenPermissions} returns this
 */
proto.codectrl.auth_service.TokenPermissions.prototype.setWrite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.codectrl.auth_service.Name.toObject(includeInstance, f),
    permissions: (f = msg.getPermissions()) && proto.codectrl.auth_service.TokenPermissions.toObject(includeInstance, f),
    intent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.Token}
 */
proto.codectrl.auth_service.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.Token;
  return proto.codectrl.auth_service.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.Token}
 */
proto.codectrl.auth_service.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codectrl.auth_service.Name;
      reader.readMessage(value,proto.codectrl.auth_service.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.codectrl.auth_service.TokenPermissions;
      reader.readMessage(value,proto.codectrl.auth_service.TokenPermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 3:
      var value = /** @type {!proto.codectrl.auth_service.TokenIntent} */ (reader.readEnum());
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codectrl.auth_service.Name.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codectrl.auth_service.TokenPermissions.serializeBinaryToWriter
    );
  }
  f = message.getIntent();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.codectrl.auth_service.Name}
 */
proto.codectrl.auth_service.Token.prototype.getName = function() {
  return /** @type{?proto.codectrl.auth_service.Name} */ (
    jspb.Message.getWrapperField(this, proto.codectrl.auth_service.Name, 1));
};


/**
 * @param {?proto.codectrl.auth_service.Name|undefined} value
 * @return {!proto.codectrl.auth_service.Token} returns this
*/
proto.codectrl.auth_service.Token.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.auth_service.Token} returns this
 */
proto.codectrl.auth_service.Token.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.auth_service.Token.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenPermissions permissions = 2;
 * @return {?proto.codectrl.auth_service.TokenPermissions}
 */
proto.codectrl.auth_service.Token.prototype.getPermissions = function() {
  return /** @type{?proto.codectrl.auth_service.TokenPermissions} */ (
    jspb.Message.getWrapperField(this, proto.codectrl.auth_service.TokenPermissions, 2));
};


/**
 * @param {?proto.codectrl.auth_service.TokenPermissions|undefined} value
 * @return {!proto.codectrl.auth_service.Token} returns this
*/
proto.codectrl.auth_service.Token.prototype.setPermissions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.auth_service.Token} returns this
 */
proto.codectrl.auth_service.Token.prototype.clearPermissions = function() {
  return this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.auth_service.Token.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenIntent intent = 3;
 * @return {!proto.codectrl.auth_service.TokenIntent}
 */
proto.codectrl.auth_service.Token.prototype.getIntent = function() {
  return /** @type {!proto.codectrl.auth_service.TokenIntent} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.codectrl.auth_service.TokenIntent} value
 * @return {!proto.codectrl.auth_service.Token} returns this
 */
proto.codectrl.auth_service.Token.prototype.setIntent = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.GenerateTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.GenerateTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.GenerateTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.codectrl.auth_service.Name.toObject(includeInstance, f),
    intent: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequest}
 */
proto.codectrl.auth_service.GenerateTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.GenerateTokenRequest;
  return proto.codectrl.auth_service.GenerateTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.GenerateTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequest}
 */
proto.codectrl.auth_service.GenerateTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codectrl.auth_service.Name;
      reader.readMessage(value,proto.codectrl.auth_service.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.codectrl.auth_service.TokenIntent} */ (reader.readEnum());
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.GenerateTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.GenerateTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.GenerateTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codectrl.auth_service.Name.serializeBinaryToWriter
    );
  }
  f = message.getIntent();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.codectrl.auth_service.Name}
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.getName = function() {
  return /** @type{?proto.codectrl.auth_service.Name} */ (
    jspb.Message.getWrapperField(this, proto.codectrl.auth_service.Name, 1));
};


/**
 * @param {?proto.codectrl.auth_service.Name|undefined} value
 * @return {!proto.codectrl.auth_service.GenerateTokenRequest} returns this
*/
proto.codectrl.auth_service.GenerateTokenRequest.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequest} returns this
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenIntent intent = 2;
 * @return {!proto.codectrl.auth_service.TokenIntent}
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.getIntent = function() {
  return /** @type {!proto.codectrl.auth_service.TokenIntent} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.codectrl.auth_service.TokenIntent} value
 * @return {!proto.codectrl.auth_service.GenerateTokenRequest} returns this
 */
proto.codectrl.auth_service.GenerateTokenRequest.prototype.setIntent = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.VerifyTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.VerifyTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.VerifyTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.codectrl.auth_service.Token.toObject(includeInstance, f),
    intent: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.VerifyTokenRequest}
 */
proto.codectrl.auth_service.VerifyTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.VerifyTokenRequest;
  return proto.codectrl.auth_service.VerifyTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.VerifyTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.VerifyTokenRequest}
 */
proto.codectrl.auth_service.VerifyTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codectrl.auth_service.Token;
      reader.readMessage(value,proto.codectrl.auth_service.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {!proto.codectrl.auth_service.TokenIntent} */ (reader.readEnum());
      msg.setIntent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.VerifyTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.VerifyTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.VerifyTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codectrl.auth_service.Token.serializeBinaryToWriter
    );
  }
  f = message.getIntent();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Token token = 1;
 * @return {?proto.codectrl.auth_service.Token}
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.getToken = function() {
  return /** @type{?proto.codectrl.auth_service.Token} */ (
    jspb.Message.getWrapperField(this, proto.codectrl.auth_service.Token, 1));
};


/**
 * @param {?proto.codectrl.auth_service.Token|undefined} value
 * @return {!proto.codectrl.auth_service.VerifyTokenRequest} returns this
*/
proto.codectrl.auth_service.VerifyTokenRequest.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.auth_service.VerifyTokenRequest} returns this
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenIntent intent = 2;
 * @return {!proto.codectrl.auth_service.TokenIntent}
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.getIntent = function() {
  return /** @type {!proto.codectrl.auth_service.TokenIntent} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.codectrl.auth_service.TokenIntent} value
 * @return {!proto.codectrl.auth_service.VerifyTokenRequest} returns this
 */
proto.codectrl.auth_service.VerifyTokenRequest.prototype.setIntent = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.VerifyTokenRequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.VerifyTokenRequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.VerifyTokenRequestResult}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.VerifyTokenRequestResult;
  return proto.codectrl.auth_service.VerifyTokenRequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.VerifyTokenRequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.VerifyTokenRequestResult}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.codectrl.auth_service.VerifyTokenRequestResultEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.VerifyTokenRequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.VerifyTokenRequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.auth_service.VerifyTokenRequestResult} returns this
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VerifyTokenRequestResultEnum status = 2;
 * @return {!proto.codectrl.auth_service.VerifyTokenRequestResultEnum}
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.getStatus = function() {
  return /** @type {!proto.codectrl.auth_service.VerifyTokenRequestResultEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.codectrl.auth_service.VerifyTokenRequestResultEnum} value
 * @return {!proto.codectrl.auth_service.VerifyTokenRequestResult} returns this
 */
proto.codectrl.auth_service.VerifyTokenRequestResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.RevokeTokenRequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.RevokeTokenRequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.RevokeTokenRequestResult}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.RevokeTokenRequestResult;
  return proto.codectrl.auth_service.RevokeTokenRequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.RevokeTokenRequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.RevokeTokenRequestResult}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.codectrl.auth_service.RevokeTokenRequestResultEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.RevokeTokenRequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.RevokeTokenRequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.auth_service.RevokeTokenRequestResult} returns this
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RevokeTokenRequestResultEnum status = 2;
 * @return {!proto.codectrl.auth_service.RevokeTokenRequestResultEnum}
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.getStatus = function() {
  return /** @type {!proto.codectrl.auth_service.RevokeTokenRequestResultEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.codectrl.auth_service.RevokeTokenRequestResultEnum} value
 * @return {!proto.codectrl.auth_service.RevokeTokenRequestResult} returns this
 */
proto.codectrl.auth_service.RevokeTokenRequestResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.GenerateTokenRequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.GenerateTokenRequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: (f = msg.getToken()) && proto.codectrl.auth_service.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResult}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.GenerateTokenRequestResult;
  return proto.codectrl.auth_service.GenerateTokenRequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.GenerateTokenRequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResult}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.codectrl.auth_service.GenerateTokenRequestResultEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.codectrl.auth_service.Token;
      reader.readMessage(value,proto.codectrl.auth_service.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.GenerateTokenRequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.GenerateTokenRequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codectrl.auth_service.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional GenerateTokenRequestResultEnum status = 1;
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResultEnum}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.getStatus = function() {
  return /** @type {!proto.codectrl.auth_service.GenerateTokenRequestResultEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.codectrl.auth_service.GenerateTokenRequestResultEnum} value
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResult} returns this
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Token token = 2;
 * @return {?proto.codectrl.auth_service.Token}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.getToken = function() {
  return /** @type{?proto.codectrl.auth_service.Token} */ (
    jspb.Message.getWrapperField(this, proto.codectrl.auth_service.Token, 2));
};


/**
 * @param {?proto.codectrl.auth_service.Token|undefined} value
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResult} returns this
*/
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.auth_service.GenerateTokenRequestResult} returns this
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.auth_service.GenerateTokenRequestResult.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.auth_service.LoginUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.auth_service.LoginUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.auth_service.LoginUrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.LoginUrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.auth_service.LoginUrl}
 */
proto.codectrl.auth_service.LoginUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.auth_service.LoginUrl;
  return proto.codectrl.auth_service.LoginUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.auth_service.LoginUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.auth_service.LoginUrl}
 */
proto.codectrl.auth_service.LoginUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.auth_service.LoginUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.auth_service.LoginUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.auth_service.LoginUrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.auth_service.LoginUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.codectrl.auth_service.LoginUrl.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.auth_service.LoginUrl} returns this
 */
proto.codectrl.auth_service.LoginUrl.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.codectrl.auth_service.TokenIntent = {
  LOGGER: 0,
  FRONTEND: 1
};

/**
 * @enum {number}
 */
proto.codectrl.auth_service.VerifyTokenRequestResultEnum = {
  UNAUTHORISED: 0,
  NOTFOUND: 1,
  AUTHORISED: 2
};

/**
 * @enum {number}
 */
proto.codectrl.auth_service.GenerateTokenRequestResultEnum = {
  NAME_ALREADY_EXISTS: 0,
  TOKEN_ALREADY_EXISTS: 1,
  TOKEN_GENERATION_SUCCEEDED: 2
};

/**
 * @enum {number}
 */
proto.codectrl.auth_service.RevokeTokenRequestResultEnum = {
  TOKEN_NOT_FOUND: 0,
  TOKEN_REVOKATION_SUCCEEDED: 1
};

goog.object.extend(exports, proto.codectrl.auth_service);
