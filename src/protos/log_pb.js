// source: log.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var backtrace_data_pb = require('./backtrace_data_pb.js');
goog.object.extend(proto, backtrace_data_pb);
goog.exportSymbol('proto.codectrl.data.log.Log', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.data.log.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codectrl.data.log.Log.repeatedFields_, null);
};
goog.inherits(proto.codectrl.data.log.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.data.log.Log.displayName = 'proto.codectrl.data.log.Log';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codectrl.data.log.Log.repeatedFields_ = [2,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.data.log.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.data.log.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.data.log.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.data.log.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stackList: jspb.Message.toObjectList(msg.getStackList(),
    backtrace_data_pb.BacktraceData.toObject, includeInstance),
    linenumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    codesnippetMap: (f = msg.getCodesnippetMap()) ? f.toObject(includeInstance, undefined) : [],
    message: jspb.Message.getFieldWithDefault(msg, 5, ""),
    messagetype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 7, ""),
    address: jspb.Message.getFieldWithDefault(msg, 8, ""),
    language: jspb.Message.getFieldWithDefault(msg, 9, ""),
    warningsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.data.log.Log}
 */
proto.codectrl.data.log.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.data.log.Log;
  return proto.codectrl.data.log.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.data.log.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.data.log.Log}
 */
proto.codectrl.data.log.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new backtrace_data_pb.BacktraceData;
      reader.readMessage(value,backtrace_data_pb.BacktraceData.deserializeBinaryFromReader);
      msg.addStack(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLinenumber(value);
      break;
    case 4:
      var value = msg.getCodesnippetMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagetype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarnings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.data.log.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.data.log.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.data.log.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.data.log.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      backtrace_data_pb.BacktraceData.serializeBinaryToWriter
    );
  }
  f = message.getLinenumber();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCodesnippetMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMessagetype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWarningsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated codectrl.data.backtrace_data.BacktraceData stack = 2;
 * @return {!Array<!proto.codectrl.data.backtrace_data.BacktraceData>}
 */
proto.codectrl.data.log.Log.prototype.getStackList = function() {
  return /** @type{!Array<!proto.codectrl.data.backtrace_data.BacktraceData>} */ (
    jspb.Message.getRepeatedWrapperField(this, backtrace_data_pb.BacktraceData, 2));
};


/**
 * @param {!Array<!proto.codectrl.data.backtrace_data.BacktraceData>} value
 * @return {!proto.codectrl.data.log.Log} returns this
*/
proto.codectrl.data.log.Log.prototype.setStackList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.codectrl.data.backtrace_data.BacktraceData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codectrl.data.backtrace_data.BacktraceData}
 */
proto.codectrl.data.log.Log.prototype.addStack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.codectrl.data.backtrace_data.BacktraceData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.clearStackList = function() {
  return this.setStackList([]);
};


/**
 * optional uint32 lineNumber = 3;
 * @return {number}
 */
proto.codectrl.data.log.Log.prototype.getLinenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setLinenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<uint32, string> codeSnippet = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.codectrl.data.log.Log.prototype.getCodesnippetMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.clearCodesnippetMap = function() {
  this.getCodesnippetMap().clear();
  return this;};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string messageType = 6;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getMessagetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setMessagetype = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string fileName = 7;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string address = 8;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string language = 9;
 * @return {string}
 */
proto.codectrl.data.log.Log.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string warnings = 10;
 * @return {!Array<string>}
 */
proto.codectrl.data.log.Log.prototype.getWarningsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.setWarningsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.addWarnings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codectrl.data.log.Log} returns this
 */
proto.codectrl.data.log.Log.prototype.clearWarningsList = function() {
  return this.setWarningsList([]);
};


goog.object.extend(exports, proto.codectrl.data.log);
