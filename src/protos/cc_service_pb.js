// source: cc_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var log_pb = require('./log_pb.js');
goog.object.extend(proto, log_pb);
var auth_pb = require('./auth_pb.js');
goog.object.extend(proto, auth_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.codectrl.logs_service.Connection', null, global);
goog.exportSymbol('proto.codectrl.logs_service.RequestResult', null, global);
goog.exportSymbol('proto.codectrl.logs_service.RequestStatus', null, global);
goog.exportSymbol('proto.codectrl.logs_service.ServerDetails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.logs_service.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.logs_service.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.logs_service.Connection.displayName = 'proto.codectrl.logs_service.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.logs_service.RequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.logs_service.RequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.logs_service.RequestResult.displayName = 'proto.codectrl.logs_service.RequestResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codectrl.logs_service.ServerDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codectrl.logs_service.ServerDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codectrl.logs_service.ServerDetails.displayName = 'proto.codectrl.logs_service.ServerDetails';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.logs_service.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.logs_service.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.logs_service.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: (f = msg.getToken()) && auth_pb.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.logs_service.Connection}
 */
proto.codectrl.logs_service.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.logs_service.Connection;
  return proto.codectrl.logs_service.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.logs_service.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.logs_service.Connection}
 */
proto.codectrl.logs_service.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new auth_pb.Token;
      reader.readMessage(value,auth_pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.logs_service.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.logs_service.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.logs_service.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      auth_pb.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.codectrl.logs_service.Connection.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.logs_service.Connection} returns this
 */
proto.codectrl.logs_service.Connection.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional codectrl.auth_service.Token token = 2;
 * @return {?proto.codectrl.auth_service.Token}
 */
proto.codectrl.logs_service.Connection.prototype.getToken = function() {
  return /** @type{?proto.codectrl.auth_service.Token} */ (
    jspb.Message.getWrapperField(this, auth_pb.Token, 2));
};


/**
 * @param {?proto.codectrl.auth_service.Token|undefined} value
 * @return {!proto.codectrl.logs_service.Connection} returns this
*/
proto.codectrl.logs_service.Connection.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.logs_service.Connection} returns this
 */
proto.codectrl.logs_service.Connection.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.logs_service.Connection.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.logs_service.RequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.logs_service.RequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.logs_service.RequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.RequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authstatus: (f = msg.getAuthstatus()) && auth_pb.GenerateTokenRequestResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.logs_service.RequestResult}
 */
proto.codectrl.logs_service.RequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.logs_service.RequestResult;
  return proto.codectrl.logs_service.RequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.logs_service.RequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.logs_service.RequestResult}
 */
proto.codectrl.logs_service.RequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.codectrl.logs_service.RequestStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new auth_pb.GenerateTokenRequestResult;
      reader.readMessage(value,auth_pb.GenerateTokenRequestResult.deserializeBinaryFromReader);
      msg.setAuthstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.logs_service.RequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.logs_service.RequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.logs_service.RequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.RequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAuthstatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      auth_pb.GenerateTokenRequestResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.codectrl.logs_service.RequestResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.logs_service.RequestResult} returns this
 */
proto.codectrl.logs_service.RequestResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RequestStatus status = 2;
 * @return {!proto.codectrl.logs_service.RequestStatus}
 */
proto.codectrl.logs_service.RequestResult.prototype.getStatus = function() {
  return /** @type {!proto.codectrl.logs_service.RequestStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.codectrl.logs_service.RequestStatus} value
 * @return {!proto.codectrl.logs_service.RequestResult} returns this
 */
proto.codectrl.logs_service.RequestResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional codectrl.auth_service.GenerateTokenRequestResult authStatus = 3;
 * @return {?proto.codectrl.auth_service.GenerateTokenRequestResult}
 */
proto.codectrl.logs_service.RequestResult.prototype.getAuthstatus = function() {
  return /** @type{?proto.codectrl.auth_service.GenerateTokenRequestResult} */ (
    jspb.Message.getWrapperField(this, auth_pb.GenerateTokenRequestResult, 3));
};


/**
 * @param {?proto.codectrl.auth_service.GenerateTokenRequestResult|undefined} value
 * @return {!proto.codectrl.logs_service.RequestResult} returns this
*/
proto.codectrl.logs_service.RequestResult.prototype.setAuthstatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codectrl.logs_service.RequestResult} returns this
 */
proto.codectrl.logs_service.RequestResult.prototype.clearAuthstatus = function() {
  return this.setAuthstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codectrl.logs_service.RequestResult.prototype.hasAuthstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codectrl.logs_service.ServerDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.codectrl.logs_service.ServerDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codectrl.logs_service.ServerDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.ServerDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uptime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requiresauthentication: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codectrl.logs_service.ServerDetails}
 */
proto.codectrl.logs_service.ServerDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codectrl.logs_service.ServerDetails;
  return proto.codectrl.logs_service.ServerDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codectrl.logs_service.ServerDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codectrl.logs_service.ServerDetails}
 */
proto.codectrl.logs_service.ServerDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiresauthentication(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codectrl.logs_service.ServerDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codectrl.logs_service.ServerDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codectrl.logs_service.ServerDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codectrl.logs_service.ServerDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUptime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRequiresauthentication();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.codectrl.logs_service.ServerDetails.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codectrl.logs_service.ServerDetails} returns this
 */
proto.codectrl.logs_service.ServerDetails.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.codectrl.logs_service.ServerDetails.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.codectrl.logs_service.ServerDetails} returns this
 */
proto.codectrl.logs_service.ServerDetails.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 uptime = 3;
 * @return {number}
 */
proto.codectrl.logs_service.ServerDetails.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.codectrl.logs_service.ServerDetails} returns this
 */
proto.codectrl.logs_service.ServerDetails.prototype.setUptime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool requiresAuthentication = 4;
 * @return {boolean}
 */
proto.codectrl.logs_service.ServerDetails.prototype.getRequiresauthentication = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.codectrl.logs_service.ServerDetails} returns this
 */
proto.codectrl.logs_service.ServerDetails.prototype.setRequiresauthentication = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.codectrl.logs_service.RequestStatus = {
  CONFIRMED: 0,
  ERROR: 1
};

goog.object.extend(exports, proto.codectrl.logs_service);
