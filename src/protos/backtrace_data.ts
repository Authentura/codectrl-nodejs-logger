/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_number,eslint_disable,ts_nocheck
// @generated from protobuf file "backtrace_data.proto" (package "codectrl.data.backtrace_data", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Generalised message containing information regarding a single stacktrace
 * item.
 *
 * @generated from protobuf message codectrl.data.backtrace_data.BacktraceData
 */
export interface BacktraceData {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string filePath = 2;
     */
    filePath: string;
    /**
     * @generated from protobuf field: uint32 lineNumber = 3;
     */
    lineNumber: number;
    /**
     * @generated from protobuf field: uint32 columnNumber = 4;
     */
    columnNumber: number;
    /**
     * @generated from protobuf field: string code = 5;
     */
    code: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BacktraceData$Type extends MessageType<BacktraceData> {
    constructor() {
        super("codectrl.data.backtrace_data.BacktraceData", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lineNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "columnNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BacktraceData>): BacktraceData {
        const message = { name: "", filePath: "", lineNumber: 0, columnNumber: 0, code: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BacktraceData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BacktraceData): BacktraceData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string filePath */ 2:
                    message.filePath = reader.string();
                    break;
                case /* uint32 lineNumber */ 3:
                    message.lineNumber = reader.uint32();
                    break;
                case /* uint32 columnNumber */ 4:
                    message.columnNumber = reader.uint32();
                    break;
                case /* string code */ 5:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BacktraceData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string filePath = 2; */
        if (message.filePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filePath);
        /* uint32 lineNumber = 3; */
        if (message.lineNumber !== 0)
            writer.tag(3, WireType.Varint).uint32(message.lineNumber);
        /* uint32 columnNumber = 4; */
        if (message.columnNumber !== 0)
            writer.tag(4, WireType.Varint).uint32(message.columnNumber);
        /* string code = 5; */
        if (message.code !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.data.backtrace_data.BacktraceData
 */
export const BacktraceData = new BacktraceData$Type();
