/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_number,eslint_disable,ts_nocheck
// @generated from protobuf file "auth.proto" (package "codectrl.auth_service", syntax proto3)
// tslint:disable
// @ts-nocheck
import { Empty } from "./google/protobuf/empty.js";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message codectrl.auth_service.Name
 */
export interface Name {
    /**
     * @generated from protobuf field: string inner = 1;
     */
    inner: string;
}
/**
 * @generated from protobuf message codectrl.auth_service.TokenPermissions
 */
export interface TokenPermissions {
    /**
     * @generated from protobuf field: bool read = 1;
     */
    read: boolean;
    /**
     * @generated from protobuf field: bool write = 2;
     */
    write: boolean;
}
/**
 * @generated from protobuf message codectrl.auth_service.Token
 */
export interface Token {
    /**
     * @generated from protobuf field: codectrl.auth_service.Name name = 1;
     */
    name?: Name;
    /**
     * @generated from protobuf field: codectrl.auth_service.TokenPermissions permissions = 2;
     */
    permissions?: TokenPermissions;
    /**
     * @generated from protobuf field: codectrl.auth_service.TokenIntent intent = 3;
     */
    intent: TokenIntent;
}
/**
 * @generated from protobuf message codectrl.auth_service.GenerateTokenRequest
 */
export interface GenerateTokenRequest {
    /**
     * @generated from protobuf field: codectrl.auth_service.Name name = 1;
     */
    name?: Name;
    /**
     * @generated from protobuf field: codectrl.auth_service.TokenIntent intent = 2;
     */
    intent: TokenIntent;
}
/**
 * @generated from protobuf message codectrl.auth_service.VerifyTokenRequest
 */
export interface VerifyTokenRequest {
    /**
     * @generated from protobuf field: codectrl.auth_service.Token token = 1;
     */
    token?: Token;
    /**
     * @generated from protobuf field: codectrl.auth_service.TokenIntent intent = 2;
     */
    intent: TokenIntent;
}
/**
 * @generated from protobuf message codectrl.auth_service.VerifyTokenRequestResult
 */
export interface VerifyTokenRequestResult {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: codectrl.auth_service.VerifyTokenRequestResultEnum status = 2;
     */
    status: VerifyTokenRequestResultEnum;
}
/**
 * @generated from protobuf message codectrl.auth_service.RevokeTokenRequestResult
 */
export interface RevokeTokenRequestResult {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: codectrl.auth_service.RevokeTokenRequestResultEnum status = 2;
     */
    status: RevokeTokenRequestResultEnum;
}
/**
 * @generated from protobuf message codectrl.auth_service.GenerateTokenRequestResult
 */
export interface GenerateTokenRequestResult {
    /**
     * @generated from protobuf field: codectrl.auth_service.GenerateTokenRequestResultEnum status = 1;
     */
    status: GenerateTokenRequestResultEnum;
    /**
     * @generated from protobuf field: optional codectrl.auth_service.Token token = 2;
     */
    token?: Token;
}
/**
 * @generated from protobuf message codectrl.auth_service.LoginUrl
 */
export interface LoginUrl {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf enum codectrl.auth_service.TokenIntent
 */
export enum TokenIntent {
    /**
     * @generated from protobuf enum value: LOGGER = 0;
     */
    LOGGER = 0,
    /**
     * @generated from protobuf enum value: FRONTEND = 1;
     */
    FRONTEND = 1
}
/**
 * @generated from protobuf enum codectrl.auth_service.VerifyTokenRequestResultEnum
 */
export enum VerifyTokenRequestResultEnum {
    /**
     * @generated from protobuf enum value: UNAUTHORISED = 0;
     */
    UNAUTHORISED = 0,
    /**
     * @generated from protobuf enum value: NOTFOUND = 1;
     */
    NOTFOUND = 1,
    /**
     * @generated from protobuf enum value: AUTHORISED = 2;
     */
    AUTHORISED = 2
}
/**
 * @generated from protobuf enum codectrl.auth_service.GenerateTokenRequestResultEnum
 */
export enum GenerateTokenRequestResultEnum {
    /**
     * If another token under this name is already present.
     *
     * @generated from protobuf enum value: NAME_ALREADY_EXISTS = 0;
     */
    NAME_ALREADY_EXISTS = 0,
    /**
     * If the exact token is already present.
     *
     * @generated from protobuf enum value: TOKEN_ALREADY_EXISTS = 1;
     */
    TOKEN_ALREADY_EXISTS = 1,
    /**
     * If the token was successfully added.
     *
     * @generated from protobuf enum value: TOKEN_GENERATION_SUCCEEDED = 2;
     */
    TOKEN_GENERATION_SUCCEEDED = 2
}
/**
 * @generated from protobuf enum codectrl.auth_service.RevokeTokenRequestResultEnum
 */
export enum RevokeTokenRequestResultEnum {
    /**
     * If the token is not found.
     *
     * @generated from protobuf enum value: TOKEN_NOT_FOUND = 0;
     */
    TOKEN_NOT_FOUND = 0,
    /**
     * If the token was successfully added.
     *
     * @generated from protobuf enum value: TOKEN_REVOKATION_SUCCEEDED = 1;
     */
    TOKEN_REVOKATION_SUCCEEDED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Name$Type extends MessageType<Name> {
    constructor() {
        super("codectrl.auth_service.Name", [
            { no: 1, name: "inner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Name>): Name {
        const message = { inner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Name>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Name): Name {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string inner */ 1:
                    message.inner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Name, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string inner = 1; */
        if (message.inner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.inner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.Name
 */
export const Name = new Name$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenPermissions$Type extends MessageType<TokenPermissions> {
    constructor() {
        super("codectrl.auth_service.TokenPermissions", [
            { no: 1, name: "read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "write", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TokenPermissions>): TokenPermissions {
        const message = { read: false, write: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TokenPermissions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenPermissions): TokenPermissions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool read */ 1:
                    message.read = reader.bool();
                    break;
                case /* bool write */ 2:
                    message.write = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenPermissions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool read = 1; */
        if (message.read !== false)
            writer.tag(1, WireType.Varint).bool(message.read);
        /* bool write = 2; */
        if (message.write !== false)
            writer.tag(2, WireType.Varint).bool(message.write);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.TokenPermissions
 */
export const TokenPermissions = new TokenPermissions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("codectrl.auth_service.Token", [
            { no: 1, name: "name", kind: "message", T: () => Name },
            { no: 2, name: "permissions", kind: "message", T: () => TokenPermissions },
            { no: 3, name: "intent", kind: "enum", T: () => ["codectrl.auth_service.TokenIntent", TokenIntent] }
        ]);
    }
    create(value?: PartialMessage<Token>): Token {
        const message = { intent: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Token>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* codectrl.auth_service.Name name */ 1:
                    message.name = Name.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* codectrl.auth_service.TokenPermissions permissions */ 2:
                    message.permissions = TokenPermissions.internalBinaryRead(reader, reader.uint32(), options, message.permissions);
                    break;
                case /* codectrl.auth_service.TokenIntent intent */ 3:
                    message.intent = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* codectrl.auth_service.Name name = 1; */
        if (message.name)
            Name.internalBinaryWrite(message.name, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* codectrl.auth_service.TokenPermissions permissions = 2; */
        if (message.permissions)
            TokenPermissions.internalBinaryWrite(message.permissions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* codectrl.auth_service.TokenIntent intent = 3; */
        if (message.intent !== 0)
            writer.tag(3, WireType.Varint).int32(message.intent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTokenRequest$Type extends MessageType<GenerateTokenRequest> {
    constructor() {
        super("codectrl.auth_service.GenerateTokenRequest", [
            { no: 1, name: "name", kind: "message", T: () => Name },
            { no: 2, name: "intent", kind: "enum", T: () => ["codectrl.auth_service.TokenIntent", TokenIntent] }
        ]);
    }
    create(value?: PartialMessage<GenerateTokenRequest>): GenerateTokenRequest {
        const message = { intent: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenerateTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateTokenRequest): GenerateTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* codectrl.auth_service.Name name */ 1:
                    message.name = Name.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* codectrl.auth_service.TokenIntent intent */ 2:
                    message.intent = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* codectrl.auth_service.Name name = 1; */
        if (message.name)
            Name.internalBinaryWrite(message.name, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* codectrl.auth_service.TokenIntent intent = 2; */
        if (message.intent !== 0)
            writer.tag(2, WireType.Varint).int32(message.intent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.GenerateTokenRequest
 */
export const GenerateTokenRequest = new GenerateTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenRequest$Type extends MessageType<VerifyTokenRequest> {
    constructor() {
        super("codectrl.auth_service.VerifyTokenRequest", [
            { no: 1, name: "token", kind: "message", T: () => Token },
            { no: 2, name: "intent", kind: "enum", T: () => ["codectrl.auth_service.TokenIntent", TokenIntent] }
        ]);
    }
    create(value?: PartialMessage<VerifyTokenRequest>): VerifyTokenRequest {
        const message = { intent: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyTokenRequest): VerifyTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* codectrl.auth_service.Token token */ 1:
                    message.token = Token.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                case /* codectrl.auth_service.TokenIntent intent */ 2:
                    message.intent = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* codectrl.auth_service.Token token = 1; */
        if (message.token)
            Token.internalBinaryWrite(message.token, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* codectrl.auth_service.TokenIntent intent = 2; */
        if (message.intent !== 0)
            writer.tag(2, WireType.Varint).int32(message.intent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.VerifyTokenRequest
 */
export const VerifyTokenRequest = new VerifyTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenRequestResult$Type extends MessageType<VerifyTokenRequestResult> {
    constructor() {
        super("codectrl.auth_service.VerifyTokenRequestResult", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["codectrl.auth_service.VerifyTokenRequestResultEnum", VerifyTokenRequestResultEnum] }
        ]);
    }
    create(value?: PartialMessage<VerifyTokenRequestResult>): VerifyTokenRequestResult {
        const message = { message: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyTokenRequestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyTokenRequestResult): VerifyTokenRequestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* codectrl.auth_service.VerifyTokenRequestResultEnum status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyTokenRequestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* codectrl.auth_service.VerifyTokenRequestResultEnum status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.VerifyTokenRequestResult
 */
export const VerifyTokenRequestResult = new VerifyTokenRequestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeTokenRequestResult$Type extends MessageType<RevokeTokenRequestResult> {
    constructor() {
        super("codectrl.auth_service.RevokeTokenRequestResult", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["codectrl.auth_service.RevokeTokenRequestResultEnum", RevokeTokenRequestResultEnum] }
        ]);
    }
    create(value?: PartialMessage<RevokeTokenRequestResult>): RevokeTokenRequestResult {
        const message = { message: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevokeTokenRequestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeTokenRequestResult): RevokeTokenRequestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* codectrl.auth_service.RevokeTokenRequestResultEnum status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeTokenRequestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* codectrl.auth_service.RevokeTokenRequestResultEnum status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.RevokeTokenRequestResult
 */
export const RevokeTokenRequestResult = new RevokeTokenRequestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateTokenRequestResult$Type extends MessageType<GenerateTokenRequestResult> {
    constructor() {
        super("codectrl.auth_service.GenerateTokenRequestResult", [
            { no: 1, name: "status", kind: "enum", T: () => ["codectrl.auth_service.GenerateTokenRequestResultEnum", GenerateTokenRequestResultEnum] },
            { no: 2, name: "token", kind: "message", T: () => Token }
        ]);
    }
    create(value?: PartialMessage<GenerateTokenRequestResult>): GenerateTokenRequestResult {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenerateTokenRequestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateTokenRequestResult): GenerateTokenRequestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* codectrl.auth_service.GenerateTokenRequestResultEnum status */ 1:
                    message.status = reader.int32();
                    break;
                case /* optional codectrl.auth_service.Token token */ 2:
                    message.token = Token.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateTokenRequestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* codectrl.auth_service.GenerateTokenRequestResultEnum status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* optional codectrl.auth_service.Token token = 2; */
        if (message.token)
            Token.internalBinaryWrite(message.token, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.GenerateTokenRequestResult
 */
export const GenerateTokenRequestResult = new GenerateTokenRequestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginUrl$Type extends MessageType<LoginUrl> {
    constructor() {
        super("codectrl.auth_service.LoginUrl", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginUrl>): LoginUrl {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginUrl): LoginUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.auth_service.LoginUrl
 */
export const LoginUrl = new LoginUrl$Type();
/**
 * @generated ServiceType for protobuf service codectrl.auth_service.Authentication
 */
export const Authentication = new ServiceType("codectrl.auth_service.Authentication", [
    { name: "VerifyToken", options: {}, I: VerifyTokenRequest, O: VerifyTokenRequestResult },
    { name: "GenerateToken", options: {}, I: GenerateTokenRequest, O: GenerateTokenRequestResult },
    { name: "RevokeToken", options: {}, I: Token, O: RevokeTokenRequestResult },
    { name: "RefreshToken", options: {}, I: Token, O: Token },
    { name: "GithubLogin", options: {}, I: Empty, O: LoginUrl }
]);
