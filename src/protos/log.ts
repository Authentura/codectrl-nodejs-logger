/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_number,eslint_disable,ts_nocheck
// @generated from protobuf file "log.proto" (package "codectrl.data.log", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BacktraceData } from "./backtrace_data.js";
/**
 * Main log message for use when sending to a CodeCtrl gRPC server.
 *
 * @generated from protobuf message codectrl.data.log.Log
 */
export interface Log {
    /**
     * NOTE: This field should be generated by CodeCtrl gRPC servers, any value
     * assigned to it by loggers will be overwritten. Therefore, leave it as a
     * blank.
     *
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: repeated codectrl.data.backtrace_data.BacktraceData stack = 2;
     */
    stack: BacktraceData[];
    /**
     * @generated from protobuf field: uint32 lineNumber = 3;
     */
    lineNumber: number;
    /**
     * @generated from protobuf field: map<uint32, string> codeSnippet = 4;
     */
    codeSnippet: {
        [key: number]: string;
    };
    /**
     * @generated from protobuf field: string message = 5;
     */
    message: string;
    /**
     * @generated from protobuf field: string messageType = 6;
     */
    messageType: string;
    /**
     * @generated from protobuf field: string fileName = 7;
     */
    fileName: string;
    /**
     * NOTE: This field should be generated by CodeCtrl gRPC servers, any value
     * assigned to it by loggers will be overwritten. Therefore, leave it as a
     * blank.
     *
     * @generated from protobuf field: string address = 8;
     */
    address: string;
    /**
     * @generated from protobuf field: string language = 9;
     */
    language: string;
    /**
     * @generated from protobuf field: repeated string warnings = 10;
     */
    warnings: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Log$Type extends MessageType<Log> {
    constructor() {
        super("codectrl.data.log.Log", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stack", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BacktraceData },
            { no: 3, name: "lineNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codeSnippet", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 5, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "messageType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "warnings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Log>): Log {
        const message = { uuid: "", stack: [], lineNumber: 0, codeSnippet: {}, message: "", messageType: "", fileName: "", address: "", language: "", warnings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Log>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Log): Log {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* repeated codectrl.data.backtrace_data.BacktraceData stack */ 2:
                    message.stack.push(BacktraceData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 lineNumber */ 3:
                    message.lineNumber = reader.uint32();
                    break;
                case /* map<uint32, string> codeSnippet */ 4:
                    this.binaryReadMap4(message.codeSnippet, reader, options);
                    break;
                case /* string message */ 5:
                    message.message = reader.string();
                    break;
                case /* string messageType */ 6:
                    message.messageType = reader.string();
                    break;
                case /* string fileName */ 7:
                    message.fileName = reader.string();
                    break;
                case /* string address */ 8:
                    message.address = reader.string();
                    break;
                case /* string language */ 9:
                    message.language = reader.string();
                    break;
                case /* repeated string warnings */ 10:
                    message.warnings.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: Log["codeSnippet"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Log["codeSnippet"] | undefined, val: Log["codeSnippet"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field codectrl.data.log.Log.codeSnippet");
            }
        }
        map[key ?? 0] = val ?? "";
    }
    internalBinaryWrite(message: Log, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* repeated codectrl.data.backtrace_data.BacktraceData stack = 2; */
        for (let i = 0; i < message.stack.length; i++)
            BacktraceData.internalBinaryWrite(message.stack[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 lineNumber = 3; */
        if (message.lineNumber !== 0)
            writer.tag(3, WireType.Varint).uint32(message.lineNumber);
        /* map<uint32, string> codeSnippet = 4; */
        for (let k of Object.keys(message.codeSnippet))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.LengthDelimited).string(message.codeSnippet[k as any]).join();
        /* string message = 5; */
        if (message.message !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        /* string messageType = 6; */
        if (message.messageType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.messageType);
        /* string fileName = 7; */
        if (message.fileName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fileName);
        /* string address = 8; */
        if (message.address !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.address);
        /* string language = 9; */
        if (message.language !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.language);
        /* repeated string warnings = 10; */
        for (let i = 0; i < message.warnings.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.warnings[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.data.log.Log
 */
export const Log = new Log$Type();
