/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_number,eslint_disable,ts_nocheck
// @generated from protobuf file "cc_service.proto" (package "codectrl.logs_service", syntax proto3)
// tslint:disable
// @ts-nocheck
import { Empty } from "./google/protobuf/empty.js";
import { Log } from "./log.js";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GenerateTokenRequestResult } from "./auth.js";
import { Token } from "./auth.js";
/**
 * Describes the connection between the interface and a given server. Each
 * client is supplied with a uuid that is saved to disk or to localStorage. The
 * server uses this information to determine which logs should be sent to each
 * client and to skip duplicate identified by the `uuid` of the log.
 *
 * @generated from protobuf message codectrl.logs_service.Connection
 */
export interface Connection {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: optional codectrl.auth_service.Token token = 2;
     */
    token?: Token;
}
/**
 * Returned by the procedures to describe the result of a request.
 *
 * @generated from protobuf message codectrl.logs_service.RequestResult
 */
export interface RequestResult {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: codectrl.logs_service.RequestStatus status = 2;
     */
    status: RequestStatus;
    /**
     * @generated from protobuf field: optional codectrl.auth_service.GenerateTokenRequestResult authStatus = 3;
     */
    authStatus?: GenerateTokenRequestResult;
}
/**
 * Server details about the current gRPC server.
 *
 * @generated from protobuf message codectrl.logs_service.ServerDetails
 */
export interface ServerDetails {
    /**
     * @generated from protobuf field: string host = 1;
     */
    host: string;
    /**
     * @generated from protobuf field: uint32 port = 2;
     */
    port: number;
    /**
     * @generated from protobuf field: uint64 uptime = 3;
     */
    uptime: number;
    /**
     * @generated from protobuf field: bool requiresAuthentication = 4;
     */
    requiresAuthentication: boolean;
}
/**
 * Status codes for whether or not a particular request has succeeded.
 *
 * @generated from protobuf enum codectrl.logs_service.RequestStatus
 */
export enum RequestStatus {
    /**
     * @generated from protobuf enum value: CONFIRMED = 0;
     */
    CONFIRMED = 0,
    /**
     * @generated from protobuf enum value: ERROR = 1;
     */
    ERROR = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Connection$Type extends MessageType<Connection> {
    constructor() {
        super("codectrl.logs_service.Connection", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "message", T: () => Token }
        ]);
    }
    create(value?: PartialMessage<Connection>): Connection {
        const message = { uuid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Connection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Connection): Connection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* optional codectrl.auth_service.Token token */ 2:
                    message.token = Token.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Connection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* optional codectrl.auth_service.Token token = 2; */
        if (message.token)
            Token.internalBinaryWrite(message.token, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.logs_service.Connection
 */
export const Connection = new Connection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestResult$Type extends MessageType<RequestResult> {
    constructor() {
        super("codectrl.logs_service.RequestResult", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["codectrl.logs_service.RequestStatus", RequestStatus] },
            { no: 3, name: "authStatus", kind: "message", T: () => GenerateTokenRequestResult }
        ]);
    }
    create(value?: PartialMessage<RequestResult>): RequestResult {
        const message = { message: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestResult): RequestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* codectrl.logs_service.RequestStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional codectrl.auth_service.GenerateTokenRequestResult authStatus */ 3:
                    message.authStatus = GenerateTokenRequestResult.internalBinaryRead(reader, reader.uint32(), options, message.authStatus);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* codectrl.logs_service.RequestStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional codectrl.auth_service.GenerateTokenRequestResult authStatus = 3; */
        if (message.authStatus)
            GenerateTokenRequestResult.internalBinaryWrite(message.authStatus, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.logs_service.RequestResult
 */
export const RequestResult = new RequestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerDetails$Type extends MessageType<ServerDetails> {
    constructor() {
        super("codectrl.logs_service.ServerDetails", [
            { no: 1, name: "host", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "uptime", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "requiresAuthentication", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ServerDetails>): ServerDetails {
        const message = { host: "", port: 0, uptime: 0, requiresAuthentication: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerDetails): ServerDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host */ 1:
                    message.host = reader.string();
                    break;
                case /* uint32 port */ 2:
                    message.port = reader.uint32();
                    break;
                case /* uint64 uptime */ 3:
                    message.uptime = reader.uint64().toNumber();
                    break;
                case /* bool requiresAuthentication */ 4:
                    message.requiresAuthentication = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host = 1; */
        if (message.host !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.host);
        /* uint32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).uint32(message.port);
        /* uint64 uptime = 3; */
        if (message.uptime !== 0)
            writer.tag(3, WireType.Varint).uint64(message.uptime);
        /* bool requiresAuthentication = 4; */
        if (message.requiresAuthentication !== false)
            writer.tag(4, WireType.Varint).bool(message.requiresAuthentication);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codectrl.logs_service.ServerDetails
 */
export const ServerDetails = new ServerDetails$Type();
/**
 * @generated ServiceType for protobuf service codectrl.logs_service.LogServer
 */
export const LogServer = new ServiceType("codectrl.logs_service.LogServer", [
    { name: "GetLog", options: {}, I: Connection, O: Log },
    { name: "GetLogs", serverStreaming: true, options: {}, I: Connection, O: Log },
    { name: "GetServerDetails", options: {}, I: Empty, O: ServerDetails },
    { name: "RegisterClient", options: {}, I: Empty, O: Connection },
    { name: "RegisterExistingClient", options: {}, I: Connection, O: RequestResult }
]);
/**
 * @generated ServiceType for protobuf service codectrl.logs_service.LogClient
 */
export const LogClient = new ServiceType("codectrl.logs_service.LogClient", [
    { name: "SendLog", options: {}, I: Log, O: RequestResult },
    { name: "SendLogs", clientStreaming: true, options: {}, I: Log, O: RequestResult }
]);
