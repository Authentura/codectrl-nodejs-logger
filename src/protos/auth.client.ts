/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_number,eslint_disable,ts_nocheck
// @generated from protobuf file "auth.proto" (package "codectrl.auth_service", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Authentication } from "./auth.js";
import type { LoginUrl } from "./auth.js";
import type { Empty } from "./google/protobuf/empty.js";
import type { RevokeTokenRequestResult } from "./auth.js";
import type { Token } from "./auth.js";
import type { GenerateTokenRequestResult } from "./auth.js";
import type { GenerateTokenRequest } from "./auth.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { VerifyTokenRequestResult } from "./auth.js";
import type { VerifyTokenRequest } from "./auth.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service codectrl.auth_service.Authentication
 */
export interface IAuthenticationClient {
    /**
     * Takes a token and verifies that it is:
     *    a) In valid format
     *    b) Present in the database/filesystem (down to implementation)
     *    c) Has the correct permissions for the given intent
     *
     * @generated from protobuf rpc: VerifyToken(codectrl.auth_service.VerifyTokenRequest) returns (codectrl.auth_service.VerifyTokenRequestResult);
     */
    verifyToken(input: VerifyTokenRequest, options?: RpcOptions): UnaryCall<VerifyTokenRequest, VerifyTokenRequestResult>;
    /**
     * @generated from protobuf rpc: GenerateToken(codectrl.auth_service.GenerateTokenRequest) returns (codectrl.auth_service.GenerateTokenRequestResult);
     */
    generateToken(input: GenerateTokenRequest, options?: RpcOptions): UnaryCall<GenerateTokenRequest, GenerateTokenRequestResult>;
    /**
     * @generated from protobuf rpc: RevokeToken(codectrl.auth_service.Token) returns (codectrl.auth_service.RevokeTokenRequestResult);
     */
    revokeToken(input: Token, options?: RpcOptions): UnaryCall<Token, RevokeTokenRequestResult>;
    /**
     * @generated from protobuf rpc: RefreshToken(codectrl.auth_service.Token) returns (codectrl.auth_service.Token);
     */
    refreshToken(input: Token, options?: RpcOptions): UnaryCall<Token, Token>;
    /**
     * @generated from protobuf rpc: GithubLogin(google.protobuf.Empty) returns (codectrl.auth_service.LoginUrl);
     */
    githubLogin(input: Empty, options?: RpcOptions): UnaryCall<Empty, LoginUrl>;
}
/**
 * @generated from protobuf service codectrl.auth_service.Authentication
 */
export class AuthenticationClient implements IAuthenticationClient, ServiceInfo {
    typeName = Authentication.typeName;
    methods = Authentication.methods;
    options = Authentication.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Takes a token and verifies that it is:
     *    a) In valid format
     *    b) Present in the database/filesystem (down to implementation)
     *    c) Has the correct permissions for the given intent
     *
     * @generated from protobuf rpc: VerifyToken(codectrl.auth_service.VerifyTokenRequest) returns (codectrl.auth_service.VerifyTokenRequestResult);
     */
    verifyToken(input: VerifyTokenRequest, options?: RpcOptions): UnaryCall<VerifyTokenRequest, VerifyTokenRequestResult> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifyTokenRequest, VerifyTokenRequestResult>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GenerateToken(codectrl.auth_service.GenerateTokenRequest) returns (codectrl.auth_service.GenerateTokenRequestResult);
     */
    generateToken(input: GenerateTokenRequest, options?: RpcOptions): UnaryCall<GenerateTokenRequest, GenerateTokenRequestResult> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenerateTokenRequest, GenerateTokenRequestResult>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeToken(codectrl.auth_service.Token) returns (codectrl.auth_service.RevokeTokenRequestResult);
     */
    revokeToken(input: Token, options?: RpcOptions): UnaryCall<Token, RevokeTokenRequestResult> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Token, RevokeTokenRequestResult>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshToken(codectrl.auth_service.Token) returns (codectrl.auth_service.Token);
     */
    refreshToken(input: Token, options?: RpcOptions): UnaryCall<Token, Token> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Token, Token>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GithubLogin(google.protobuf.Empty) returns (codectrl.auth_service.LoginUrl);
     */
    githubLogin(input: Empty, options?: RpcOptions): UnaryCall<Empty, LoginUrl> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, LoginUrl>("unary", this._transport, method, opt, input);
    }
}
