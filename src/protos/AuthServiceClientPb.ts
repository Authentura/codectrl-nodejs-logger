/**
 * @fileoverview gRPC-Web generated client stub for codectrl.auth_service
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.4
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_pb from './auth_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class AuthenticationClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorVerifyToken = new grpcWeb.MethodDescriptor(
    '/codectrl.auth_service.Authentication/VerifyToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.VerifyTokenRequest,
    auth_pb.VerifyTokenRequestResult,
    (request: auth_pb.VerifyTokenRequest) => {
      return request.serializeBinary();
    },
    auth_pb.VerifyTokenRequestResult.deserializeBinary
  );

  verifyToken(
    request: auth_pb.VerifyTokenRequest,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.VerifyTokenRequestResult>;

  verifyToken(
    request: auth_pb.VerifyTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.VerifyTokenRequestResult) => void): grpcWeb.ClientReadableStream<auth_pb.VerifyTokenRequestResult>;

  verifyToken(
    request: auth_pb.VerifyTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.VerifyTokenRequestResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.auth_service.Authentication/VerifyToken',
        request,
        metadata || {},
        this.methodDescriptorVerifyToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.auth_service.Authentication/VerifyToken',
    request,
    metadata || {},
    this.methodDescriptorVerifyToken);
  }

  methodDescriptorGenerateToken = new grpcWeb.MethodDescriptor(
    '/codectrl.auth_service.Authentication/GenerateToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.GenerateTokenRequest,
    auth_pb.GenerateTokenRequestResult,
    (request: auth_pb.GenerateTokenRequest) => {
      return request.serializeBinary();
    },
    auth_pb.GenerateTokenRequestResult.deserializeBinary
  );

  generateToken(
    request: auth_pb.GenerateTokenRequest,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.GenerateTokenRequestResult>;

  generateToken(
    request: auth_pb.GenerateTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.GenerateTokenRequestResult) => void): grpcWeb.ClientReadableStream<auth_pb.GenerateTokenRequestResult>;

  generateToken(
    request: auth_pb.GenerateTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.GenerateTokenRequestResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.auth_service.Authentication/GenerateToken',
        request,
        metadata || {},
        this.methodDescriptorGenerateToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.auth_service.Authentication/GenerateToken',
    request,
    metadata || {},
    this.methodDescriptorGenerateToken);
  }

  methodDescriptorRevokeToken = new grpcWeb.MethodDescriptor(
    '/codectrl.auth_service.Authentication/RevokeToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.Token,
    auth_pb.RevokeTokenRequestResult,
    (request: auth_pb.Token) => {
      return request.serializeBinary();
    },
    auth_pb.RevokeTokenRequestResult.deserializeBinary
  );

  revokeToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.RevokeTokenRequestResult>;

  revokeToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.RevokeTokenRequestResult) => void): grpcWeb.ClientReadableStream<auth_pb.RevokeTokenRequestResult>;

  revokeToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.RevokeTokenRequestResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.auth_service.Authentication/RevokeToken',
        request,
        metadata || {},
        this.methodDescriptorRevokeToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.auth_service.Authentication/RevokeToken',
    request,
    metadata || {},
    this.methodDescriptorRevokeToken);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/codectrl.auth_service.Authentication/RefreshToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.Token,
    auth_pb.Token,
    (request: auth_pb.Token) => {
      return request.serializeBinary();
    },
    auth_pb.Token.deserializeBinary
  );

  refreshToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.Token>;

  refreshToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.Token) => void): grpcWeb.ClientReadableStream<auth_pb.Token>;

  refreshToken(
    request: auth_pb.Token,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.Token) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.auth_service.Authentication/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.auth_service.Authentication/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

  methodDescriptorGithubLogin = new grpcWeb.MethodDescriptor(
    '/codectrl.auth_service.Authentication/GithubLogin',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    auth_pb.LoginUrl,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.LoginUrl.deserializeBinary
  );

  githubLogin(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.LoginUrl>;

  githubLogin(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LoginUrl) => void): grpcWeb.ClientReadableStream<auth_pb.LoginUrl>;

  githubLogin(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LoginUrl) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/codectrl.auth_service.Authentication/GithubLogin',
        request,
        metadata || {},
        this.methodDescriptorGithubLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/codectrl.auth_service.Authentication/GithubLogin',
    request,
    metadata || {},
    this.methodDescriptorGithubLogin);
  }

}

